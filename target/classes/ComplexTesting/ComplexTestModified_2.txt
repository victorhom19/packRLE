В Java, как правило, размещают по единственному классу верхнего уровня в файлах, совпадающих по имени с этими классами;

Классы в Java именуются в соответствии с нотацией UpperCamelCase. Подробнее про принятые схемы именования можно посмотреть, например, здесь;

Что-то пошло не так с областями видимости для RLELogics. Здесь действительно класс (мотивированно) должен обладать областью видимости package-private (так же, как и вложенное перечисление, которое снаружи впринципе вроде недоступно, и метод-конструктор)?

Метод-конструктор предназначается для инициализации данных объектов класса. Логику стоит размещать отдельно. Кроме этого, методы стоит стремиться сделать максимально короткими (если в рамках решаемой задачи это возможно) - в данном случае, очевидно, можно отдельно выделить кодирование, отдельно - декодирование - для того, чтобы код был максимально читаемым;

Для решения стандартных задач - например, для реализации взаимодействия с пользователями - существуют стандартные библиотеки. В данном случае можно воспользоваться, например, библиотекой args4j. Из вопросов, возникающих в связи с текущим вариантом решения - пользователь Вам вполне может задать полный путь к какому-либо из файлов, а Вы подобные ситуации пока не обрабатываете (да и на имена вроде у ряда ОС ограничения менее жесткие);

Текущая версия реализации не поддерживает возможность того, что в тексте могут быть представлены цифры (между тем, алгоритмически с учетом выбранного варианта представления данных - это вполне возможно) - добавьте, пожалуйста, такую опцию. Кроме этого, если я правильно понимаю, в ряде случаев метод расшифровки сможет "расшифровать" входной файл с некорретным форматом данных - в подобных случаях хотелось бы видеть либо исключение, либо диагностическое сообщение;

Все ресурсы, включая reader, стоит закрывать. Для того, чтобы обеспечивать гарантированное закрытие ресурсов, в том числе, в ситуациях, когда возникает исключение, лучше использовать паттерн try-with-resources;

Для улучшения читаемости, пожалуйста:

вынесите отдельно дублирующиеся фрагменты кода во вспомогательную функцию/ функции и обращайтесь к ним;
в ситуациях "многоступенчатых" if-then-else лучше всего заменить их на switch/case;
для append toString является избыточным;
Выбрасывать исключения - это не способ общения с пользователем. Вы уверены, что в ситуации некорректной подачи аргументов программа должна падать без вывода человекочитаемого сообщения (например, его можно было бы кидать в System.err)?